from __future__ import print_function
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import datetime
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('act', help='Name of the activity')
parser.add_argument('-d', '--desc', help='Description of the activity')
args = parser.parse_args()
# If modifying these scopes, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
base = '' #  file directory location


def main(act='-', desc='-'):
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists(base + 'token.pickle'):
        with open(base + 'token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                base + 'client_secret.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(base + 'token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('sheets', 'v4', credentials=creds)

    spreadsheet_id = '' #Id for the spreadsheet
    range_name = 'Sheet1'
    value_input_option = 'RAW'
    date = datetime.date.today()
    time = datetime.datetime.now()
    print('{0}: {1}/{2}/{3}::{4}:{5}:{6}'.format(act, date.day, date.month, date.year, time.hour, time.minute,
                                                 time.second))
    values = {'values': [[act, desc, date.day, date.month, date.year, time.hour, time.minute, time.second]]}
    # Call the Sheets API
    sheet = service.spreadsheets()
    result = sheet.values().append(
        spreadsheetId=spreadsheet_id, range=range_name,
        valueInputOption=value_input_option, insertDataOption='INSERT_ROWS',
        body=values
    ).execute()
    print('{0} cells updated.'.format(result['updates'].get('updatedCells')))


if __name__ == '__main__':
    main(args.act, args.desc)
